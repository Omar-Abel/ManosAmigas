{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.errorMessage = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  ngOnInit() {\n    if (this.authService.loggedIn) {\n      this.router.navigate(['/']);\n    }\n  }\n  get emailControl() {\n    return this.loginForm.get('email');\n  }\n  get passwordControl() {\n    return this.loginForm.get('password');\n  }\n  login() {\n    if (this.loginForm.valid) {\n      const {\n        email,\n        password\n      } = this.loginForm.value;\n      this.authService.login(email, password).subscribe({\n        next: response => {\n          if (response && response.Data.token) {\n            localStorage.setItem('currentUser', JSON.stringify({\n              email,\n              token: response.Data.token\n            }));\n            this.router.navigate(['/']);\n          } else {\n            this.errorMessage = 'Login failed';\n          }\n        },\n        error: () => {\n          this.errorMessage = 'Login failed';\n        }\n      });\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","ReactiveFormsModule","CommonModule","LoginComponent","constructor","fb","authService","router","errorMessage","loginForm","group","email","required","password","minLength","ngOnInit","loggedIn","navigate","emailControl","get","passwordControl","login","valid","value","subscribe","next","response","Data","token","localStorage","setItem","JSON","stringify","error","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["C:\\Users\\Omar Lora\\Desktop\\Proyecto Final\\ManosAmigas\\ManosAmigas_Front\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.authService.loggedIn) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  get emailControl() {\r\n    return this.loginForm.get('email');\r\n  }\r\n\r\n  get passwordControl() {\r\n    return this.loginForm.get('password');\r\n  }\r\n\r\n  login(): void {\r\n    if (this.loginForm.valid) {\r\n      const { email, password } = this.loginForm.value;\r\n      this.authService.login(email, password).subscribe({\r\n        next: (response) => {\r\n          if (response && response.Data.token) {\r\n            localStorage.setItem('currentUser', JSON.stringify({ email, token: response.Data.token }));\r\n            this.router.navigate(['/']);\r\n          } else {\r\n            this.errorMessage = 'Login failed';\r\n          }\r\n        },\r\n        error: () => {\r\n          this.errorMessage = 'Login failed';\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,EAAEC,mBAAmB,QAAQ,gBAAgB;AAExF,SAASC,YAAY,QAAQ,iBAAiB;AAUvC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IALhB,KAAAC,YAAY,GAAkB,IAAI;IAOhC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACW,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAE;MAC7B,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B;EACF;EAEA,IAAIC,YAAYA,CAAA;IACd,OAAO,IAAI,CAACT,SAAS,CAACU,GAAG,CAAC,OAAO,CAAC;EACpC;EAEA,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI,CAACX,SAAS,CAACU,GAAG,CAAC,UAAU,CAAC;EACvC;EAEAE,KAAKA,CAAA;IACH,IAAI,IAAI,CAACZ,SAAS,CAACa,KAAK,EAAE;MACxB,MAAM;QAAEX,KAAK;QAAEE;MAAQ,CAAE,GAAG,IAAI,CAACJ,SAAS,CAACc,KAAK;MAChD,IAAI,CAACjB,WAAW,CAACe,KAAK,CAACV,KAAK,EAAEE,QAAQ,CAAC,CAACW,SAAS,CAAC;QAChDC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;YACnCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAErB,KAAK;cAAEiB,KAAK,EAAEF,QAAQ,CAACC,IAAI,CAACC;YAAK,CAAE,CAAC,CAAC;YAC1F,IAAI,CAACrB,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC7B,CAAC,MAAM;YACL,IAAI,CAACT,YAAY,GAAG,cAAc;UACpC;QACF,CAAC;QACDyB,KAAK,EAAEA,CAAA,KAAK;UACV,IAAI,CAACzB,YAAY,GAAG,cAAc;QACpC;OACD,CAAC;IACJ;EACF;CACD;AA/CYL,cAAc,GAAA+B,UAAA,EAP1BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACrC,YAAY,EAAED,mBAAmB;CAC5C,CAAC,C,EACWE,cAAc,CA+C1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}