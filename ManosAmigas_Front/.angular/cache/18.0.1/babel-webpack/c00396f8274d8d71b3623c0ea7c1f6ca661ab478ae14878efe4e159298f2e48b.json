{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7000/api/User/login';\n    }\n    login(email, password) {\n      return this.http.post(this.apiUrl, {\n        email,\n        password\n      }).pipe(map(response => {\n        if (response && response.Data.token) {\n          localStorage.setItem('currentUser', JSON.stringify({\n            email,\n            token: response.Data.token\n          }));\n        }\n        return response;\n      }));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n    }\n    get loggedIn() {\n      return localStorage.getItem('currentUser') !== null;\n    }\n    getToken() {\n      const currentUser = localStorage.getItem('currentUser');\n      return currentUser ? JSON.parse(currentUser).token : null;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["map","AuthService","constructor","http","apiUrl","login","email","password","post","pipe","response","Data","token","localStorage","setItem","JSON","stringify","logout","removeItem","loggedIn","getItem","getToken","currentUser","parse","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Omar Lora\\Desktop\\Proyecto Final\\ManosAmigas\\ManosAmigas_Front\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'https://localhost:7000/api/User/login';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, { email, password }).pipe(\r\n      map(response => {\r\n        if (response && response.Data.token) {\r\n          localStorage.setItem('currentUser', JSON.stringify({ email, token: response.Data.token }));\r\n        }\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('currentUser');\r\n  }\r\n\r\n  public get loggedIn(): boolean {\r\n    return localStorage.getItem('currentUser') !== null;\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    const currentUser = localStorage.getItem('currentUser');\r\n    return currentUser ? JSON.parse(currentUser).token : null;\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAGtBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFhB,KAAAC,MAAM,GAAG,uCAAuC;IAEjB;IAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;MACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACJ,MAAM,EAAE;QAAEE,KAAK;QAAEC;MAAQ,CAAE,CAAC,CAACE,IAAI,CAC/DT,GAAG,CAACU,QAAQ,IAAG;QACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;UACnCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV,KAAK;YAAEM,KAAK,EAAEF,QAAQ,CAACC,IAAI,CAACC;UAAK,CAAE,CAAC,CAAC;QAC5F;QACA,OAAOF,QAAQ;MACjB,CAAC,CAAC,CACH;IACH;IAEAO,MAAMA,CAAA;MACJJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;IACxC;IAEA,IAAWC,QAAQA,CAAA;MACjB,OAAON,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI;IACrD;IAEOC,QAAQA,CAAA;MACb,MAAMC,WAAW,GAAGT,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;MACvD,OAAOE,WAAW,GAAGP,IAAI,CAACQ,KAAK,CAACD,WAAW,CAAC,CAACV,KAAK,GAAG,IAAI;IAC3D;IAAC,QAAAY,CAAA,G;uBA3BUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAX5B,WAAW;MAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEP/B,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}