{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      if (this.authService.loggedIn) {\n        // Si el usuario está autenticado y trata de acceder a login o register, redirige al home\n        if (state.url === '/login' || state.url === '/register') {\n          this.router.navigate(['/']);\n          return false;\n        }\n        return true; // Permite acceder a las rutas protegidas\n      } else {\n        // Si el usuario no está autenticado y trata de acceder a una ruta protegida, redirige al login\n        if (state.url !== '/login' && state.url !== '/register') {\n          this.router.navigate(['/login']);\n          return false;\n        }\n        return true; // Permite acceder a login y register\n      }\n    }\n    static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthGuard;\n})();","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","loggedIn","url","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Administrator\\Documents\\ManosAmigas\\ManosAmigas\\ManosAmigas_Front\\src\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.loggedIn) {\r\n      // Si el usuario está autenticado y trata de acceder a login o register, redirige al home\r\n      if (state.url === '/login' || state.url === '/register') {\r\n        this.router.navigate(['/']);\r\n        return false;\r\n      }\r\n      return true; // Permite acceder a las rutas protegidas\r\n    } else {\r\n      // Si el usuario no está autenticado y trata de acceder a una ruta protegida, redirige al login\r\n      if (state.url !== '/login' && state.url !== '/register') {\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n      }\r\n      return true; // Permite acceder a login y register\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAOA,WAAaA,SAAS;EAAhB,MAAOA,SAAS;IACpBC,YAAoBC,WAAwB,EAAUC,MAAc;MAAhD,KAAAD,WAAW,GAAXA,WAAW;MAAuB,KAAAC,MAAM,GAANA,MAAM;IAAW;IAEvEC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;MACnE,IAAI,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;QAC7B;QACA,IAAID,KAAK,CAACE,GAAG,KAAK,QAAQ,IAAIF,KAAK,CAACE,GAAG,KAAK,WAAW,EAAE;UACvD,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAC3B,OAAO,KAAK;QACd;QACA,OAAO,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACL;QACA,IAAIH,KAAK,CAACE,GAAG,KAAK,QAAQ,IAAIF,KAAK,CAACE,GAAG,KAAK,WAAW,EAAE;UACvD,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC,OAAO,KAAK;QACd;QACA,OAAO,IAAI,CAAC,CAAC;MACf;IACF;IAAC,QAAAC,CAAA,G;uBAnBUV,SAAS,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;IAAA,QAAAC,EAAA,G;aAATjB,SAAS;MAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;MAAAC,UAAA,EAFR;IAAM;;SAEPpB,SAAS;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}