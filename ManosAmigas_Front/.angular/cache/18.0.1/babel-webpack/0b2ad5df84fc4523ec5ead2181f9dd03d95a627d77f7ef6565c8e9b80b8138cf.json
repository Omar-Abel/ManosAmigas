{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { JsonOptions } from './httpOptions';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = 'https://localhost:7000/api/User/login';\n    }\n    login(email, password) {\n      return this.http.post(this.apiUrl, {\n        email,\n        password\n      }, JsonOptions).pipe(map(response => {\n        if (response && response.Data && response.Data.token) {\n          localStorage.setItem('currentUser', JSON.stringify({\n            email,\n            token: response.Data.token\n          }));\n          return response;\n        } else {\n          throw new Error('Invalid response structure');\n        }\n      }), catchError(error => {\n        console.error('Login error', error);\n        return throwError(error);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.router.navigate(['/login']);\n    }\n    get loggedIn() {\n      return localStorage.getItem('currentUser') !== null;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["map","catchError","JsonOptions","throwError","AuthService","constructor","http","router","apiUrl","login","email","password","post","pipe","response","Data","token","localStorage","setItem","JSON","stringify","Error","error","console","logout","removeItem","navigate","loggedIn","getItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Omar Lora\\Desktop\\Proyecto Final\\ManosAmigas\\ManosAmigas_Front\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { JsonOptions } from './httpOptions'; \r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'https://localhost:7000/api/User/login';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, { email, password }, JsonOptions).pipe(\r\n      map(response => {\r\n        if (response && response.Data && response.Data.token) {\r\n          localStorage.setItem('currentUser', JSON.stringify({ email, token: response.Data.token }));\r\n          return response;\r\n        } else {\r\n          throw new Error('Invalid response structure');\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('Login error', error);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('currentUser');\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  public get loggedIn(): boolean {\r\n    return localStorage.getItem('currentUser') !== null;\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAChD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;;AAKjC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;MAAxC,KAAAD,IAAI,GAAJA,IAAI;MAAsB,KAAAC,MAAM,GAANA,MAAM;MAF5C,KAAAC,MAAM,GAAG,uCAAuC;IAEO;IAE/DC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;MACnC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,IAAI,CAACJ,MAAM,EAAE;QAAEE,KAAK;QAAEC;MAAQ,CAAE,EAAET,WAAW,CAAC,CAACW,IAAI,CAC5Eb,GAAG,CAACc,QAAQ,IAAG;QACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;UACpDC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV,KAAK;YAAEM,KAAK,EAAEF,QAAQ,CAACC,IAAI,CAACC;UAAK,CAAE,CAAC,CAAC;UAC1F,OAAOF,QAAQ;QACjB,CAAC,MAAM;UACL,MAAM,IAAIO,KAAK,CAAC,4BAA4B,CAAC;QAC/C;MACF,CAAC,CAAC,EACFpB,UAAU,CAACqB,KAAK,IAAG;QACjBC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;QACnC,OAAOnB,UAAU,CAACmB,KAAK,CAAC;MAC1B,CAAC,CAAC,CACH;IACH;IAEAE,MAAMA,CAAA;MACJP,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;MACtC,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC;IAEA,IAAWC,QAAQA,CAAA;MACjB,OAAOV,YAAY,CAACW,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI;IACrD;IAAC,QAAAC,CAAA,G;uBA7BUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;;SAEPnC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}