{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { JsonOptions } from './httpOptions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RegisterService = /*#__PURE__*/(() => {\n  class RegisterService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://localhost:7000/api/User/register';\n    }\n    register(data) {\n      return this.http.post(this.apiUrl, data, JsonOptions).pipe(map(response => {\n        if (response && response.Data.token) {\n          localStorage.setItem('currentUser', JSON.stringify({\n            email: data.email,\n            token: response.Data.token\n          }));\n        }\n        return response;\n      }));\n    }\n    static #_ = this.ɵfac = function RegisterService_Factory(t) {\n      return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegisterService,\n      factory: RegisterService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RegisterService;\n})();","map":{"version":3,"names":["map","JsonOptions","RegisterService","constructor","http","apiUrl","register","data","post","pipe","response","Data","token","localStorage","setItem","JSON","stringify","email","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Omar Lora\\Desktop\\Proyecto Final\\ManosAmigas\\ManosAmigas_Front\\src\\services\\register.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonOptions } from './httpOptions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n  private apiUrl = 'https://localhost:7000/api/User/register';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  register(data: any): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, data, JsonOptions).pipe(\r\n      map(response => {\r\n        if (response && response.Data.token) {\r\n          localStorage.setItem('currentUser', JSON.stringify({ email: data.email, token: response.Data.token }));\r\n        }\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,eAAe;;;AAK3C,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAG1BC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFhB,KAAAC,MAAM,GAAG,0CAA0C;IAEpB;IAEvCC,QAAQA,CAACC,IAAS;MAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,MAAM,EAAEE,IAAI,EAAEN,WAAW,CAAC,CAACQ,IAAI,CAC7DT,GAAG,CAACU,QAAQ,IAAG;QACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;UACnCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAEV,IAAI,CAACU,KAAK;YAAEL,KAAK,EAAEF,QAAQ,CAACC,IAAI,CAACC;UAAK,CAAE,CAAC,CAAC;QACxG;QACA,OAAOF,QAAQ;MACjB,CAAC,CAAC,CACH;IACH;IAAC,QAAAQ,CAAA,G;uBAdUhB,eAAe,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAfrB,eAAe;MAAAsB,OAAA,EAAftB,eAAe,CAAAuB,IAAA;MAAAC,UAAA,EAFd;IAAM;;SAEPxB,eAAe;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}